// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: products.sql

package db

import (
	"context"
)

const countProducts = `-- name: CountProducts :one
SELECT COUNT(*)
FROM products
WHERE case when $1::varchar = '' then true else name ILIKE $1::varchar end
  AND case when $2::float = 0 then true else price = $2::float end
`

type CountProductsParams struct {
	Name  string  `json:"name"`
	Price float64 `json:"price"`
}

func (q *Queries) CountProducts(ctx context.Context, arg CountProductsParams) (int64, error) {
	row := q.db.QueryRow(ctx, countProducts, arg.Name, arg.Price)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createProduct = `-- name: CreateProduct :exec
INSERT INTO products (name, price)
VALUES ($1::text, $2::float)
`

type CreateProductParams struct {
	Name  string  `json:"name"`
	Price float64 `json:"price"`
}

func (q *Queries) CreateProduct(ctx context.Context, arg CreateProductParams) error {
	_, err := q.db.Exec(ctx, createProduct, arg.Name, arg.Price)
	return err
}

const deleteProduct = `-- name: DeleteProduct :exec
DELETE
FROM products
WHERE id = $1
`

func (q *Queries) DeleteProduct(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteProduct, id)
	return err
}

const getProducts = `-- name: GetProducts :many
SELECT id, coalesce(name, ''), coalesce(price, 0)::float as price, (EXTRACT(epoch FROM created_at) * 1000)::bigint as created_at
FROM products
WHERE case when $1::varchar = '' then true else name ILIKE $1::varchar end
  AND case when $2::float = 0.0 then true else price = $2::float end
ORDER BY $3
LIMIT $5 OFFSET $4
`

type GetProductsParams struct {
	Name   string      `json:"name"`
	Price  float64     `json:"price"`
	SortBy interface{} `json:"sort_by"`
	Offs   int32       `json:"offs"`
	Si     int32       `json:"si"`
}

type GetProductsRow struct {
	ID        int32   `json:"id"`
	Name      string  `json:"name"`
	Price     float64 `json:"price"`
	CreatedAt int64   `json:"created_at"`
}

func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]GetProductsRow, error) {
	rows, err := q.db.Query(ctx, getProducts,
		arg.Name,
		arg.Price,
		arg.SortBy,
		arg.Offs,
		arg.Si,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductsRow{}
	for rows.Next() {
		var i GetProductsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsCursor = `-- name: GetProductsCursor :many
SELECT id, coalesce(name, ''), coalesce(price, 0)::float as price, (EXTRACT(epoch FROM created_at) * 1000)::bigint as created_at
FROM products
WHERE case when $1::varchar = '' then true else name ILIKE $1::varchar end
  AND case when $2::float = 0 then true else price = $2::float end
ORDER BY id
LIMIT $3::int
`

type GetProductsCursorParams struct {
	Name  string  `json:"name"`
	Price float64 `json:"price"`
	Si    int32   `json:"si"`
}

type GetProductsCursorRow struct {
	ID        int32   `json:"id"`
	Name      string  `json:"name"`
	Price     float64 `json:"price"`
	CreatedAt int64   `json:"created_at"`
}

func (q *Queries) GetProductsCursor(ctx context.Context, arg GetProductsCursorParams) ([]GetProductsCursorRow, error) {
	rows, err := q.db.Query(ctx, getProductsCursor, arg.Name, arg.Price, arg.Si)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductsCursorRow{}
	for rows.Next() {
		var i GetProductsCursorRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsNextCursor = `-- name: GetProductsNextCursor :many
SELECT id, coalesce(name, ''), coalesce(price, 0)::float as price, (EXTRACT(epoch FROM created_at) * 1000)::bigint as created_at
FROM products
WHERE id > $1
  AND case when $2::varchar = '' then true else name ILIKE $2::varchar end
  AND case when $3::float = 0 then true else price = $3::float end
ORDER BY id
LIMIT $4::int
`

type GetProductsNextCursorParams struct {
	Cursor int32   `json:"cursor"`
	Name   string  `json:"name"`
	Price  float64 `json:"price"`
	Si     int32   `json:"si"`
}

type GetProductsNextCursorRow struct {
	ID        int32   `json:"id"`
	Name      string  `json:"name"`
	Price     float64 `json:"price"`
	CreatedAt int64   `json:"created_at"`
}

func (q *Queries) GetProductsNextCursor(ctx context.Context, arg GetProductsNextCursorParams) ([]GetProductsNextCursorRow, error) {
	rows, err := q.db.Query(ctx, getProductsNextCursor,
		arg.Cursor,
		arg.Name,
		arg.Price,
		arg.Si,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductsNextCursorRow{}
	for rows.Next() {
		var i GetProductsNextCursorRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsPrevCursor = `-- name: GetProductsPrevCursor :many
SELECT id, coalesce(name, ''), coalesce(price, 0)::float as price, (EXTRACT(epoch FROM created_at) * 1000)::bigint as created_at
FROM products
WHERE id < $1
  AND case when $2::varchar = '' then true else name ILIKE $2::varchar end
  AND case when $3::float = 0 then true else price = $3::float end
ORDER BY id desc
LIMIT $4::int
`

type GetProductsPrevCursorParams struct {
	Cursor int32   `json:"cursor"`
	Name   string  `json:"name"`
	Price  float64 `json:"price"`
	Si     int32   `json:"si"`
}

type GetProductsPrevCursorRow struct {
	ID        int32   `json:"id"`
	Name      string  `json:"name"`
	Price     float64 `json:"price"`
	CreatedAt int64   `json:"created_at"`
}

func (q *Queries) GetProductsPrevCursor(ctx context.Context, arg GetProductsPrevCursorParams) ([]GetProductsPrevCursorRow, error) {
	rows, err := q.db.Query(ctx, getProductsPrevCursor,
		arg.Cursor,
		arg.Name,
		arg.Price,
		arg.Si,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductsPrevCursorRow{}
	for rows.Next() {
		var i GetProductsPrevCursorRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Price,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProduct = `-- name: UpdateProduct :exec
UPDATE products
SET price = $1::float,
    name  = $2::text
WHERE id = $3::int
`

type UpdateProductParams struct {
	Price float64 `json:"price"`
	Name  string  `json:"name"`
	ID    int32   `json:"id"`
}

func (q *Queries) UpdateProduct(ctx context.Context, arg UpdateProductParams) error {
	_, err := q.db.Exec(ctx, updateProduct, arg.Price, arg.Name, arg.ID)
	return err
}
