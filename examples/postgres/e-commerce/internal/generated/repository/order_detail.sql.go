// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: order_detail.sql

package db

import (
	"context"

	"github.com/jackc/pgtype"
)

const createOrderDetail = `-- name: CreateOrderDetail :exec
INSERT INTO order_detail (order_id, product_id, quantity, price)
VALUES ($1::int, $2::int, $3::int, $4::float)
`

type CreateOrderDetailParams struct {
	OrderID   int32   `json:"order_id"`
	ProductID int32   `json:"product_id"`
	Quantity  int32   `json:"quantity"`
	Price     float64 `json:"price"`
}

func (q *Queries) CreateOrderDetail(ctx context.Context, arg CreateOrderDetailParams) error {
	_, err := q.db.Exec(ctx, createOrderDetail,
		arg.OrderID,
		arg.ProductID,
		arg.Quantity,
		arg.Price,
	)
	return err
}

const getOrderDetails = `-- name: GetOrderDetails :many
SELECT od.order_detail_id, p.name AS product_name, od.quantity, od.price
FROM order_detail od
         INNER JOIN product p ON od.product_id = p.product_id
WHERE od.order_id = $1::int
`

type GetOrderDetailsRow struct {
	OrderDetailID int32          `json:"order_detail_id"`
	ProductName   string         `json:"product_name"`
	Quantity      int32          `json:"quantity"`
	Price         pgtype.Numeric `json:"price"`
}

func (q *Queries) GetOrderDetails(ctx context.Context, orderID int32) ([]GetOrderDetailsRow, error) {
	rows, err := q.db.Query(ctx, getOrderDetails, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrderDetailsRow{}
	for rows.Next() {
		var i GetOrderDetailsRow
		if err := rows.Scan(
			&i.OrderDetailID,
			&i.ProductName,
			&i.Quantity,
			&i.Price,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getOrderTotalAmount = `-- name: GetOrderTotalAmount :one
SELECT SUM(quantity * price) AS total_amount
FROM order_detail
WHERE order_id = $1::int
`

func (q *Queries) GetOrderTotalAmount(ctx context.Context, orderID int32) (int64, error) {
	row := q.db.QueryRow(ctx, getOrderTotalAmount, orderID)
	var total_amount int64
	err := row.Scan(&total_amount)
	return total_amount, err
}
