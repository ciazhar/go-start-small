// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: product.sql

package db

import (
	"context"
	"database/sql"

	"github.com/jackc/pgtype"
)

const getProductsByCategory = `-- name: GetProductsByCategory :many
SELECT p.product_id, p.name, p.description, p.price, c.name AS category_name
FROM product p
         INNER JOIN category c ON p.category_id = c.category_id
WHERE c.name = $1::varchar
`

type GetProductsByCategoryRow struct {
	ProductID    int32          `json:"product_id"`
	Name         string         `json:"name"`
	Description  sql.NullString `json:"description"`
	Price        pgtype.Numeric `json:"price"`
	CategoryName string         `json:"category_name"`
}

func (q *Queries) GetProductsByCategory(ctx context.Context, categoryName string) ([]GetProductsByCategoryRow, error) {
	rows, err := q.db.Query(ctx, getProductsByCategory, categoryName)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetProductsByCategoryRow{}
	for rows.Next() {
		var i GetProductsByCategoryRow
		if err := rows.Scan(
			&i.ProductID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.CategoryName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
