// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: orders.sql

package db

import (
	"context"
	"database/sql"

	"github.com/jackc/pgtype"
)

const createOrder = `-- name: CreateOrder :exec
INSERT INTO orders (customer_id, total_amount, status)
VALUES ($1::int, $2::float, $3::varchar)
`

type CreateOrderParams struct {
	CustomerID  int32   `json:"customer_id"`
	TotalAmount float64 `json:"total_amount"`
	Status      string  `json:"status"`
}

func (q *Queries) CreateOrder(ctx context.Context, arg CreateOrderParams) error {
	_, err := q.db.Exec(ctx, createOrder, arg.CustomerID, arg.TotalAmount, arg.Status)
	return err
}

const getOrdersByCustomer = `-- name: GetOrdersByCustomer :many
SELECT o.order_id, o.order_date, o.total_amount, o.status
FROM orders o
WHERE o.customer_id = $1::int
`

type GetOrdersByCustomerRow struct {
	OrderID     int32          `json:"order_id"`
	OrderDate   sql.NullTime   `json:"order_date"`
	TotalAmount pgtype.Numeric `json:"total_amount"`
	Status      string         `json:"status"`
}

func (q *Queries) GetOrdersByCustomer(ctx context.Context, customerID int32) ([]GetOrdersByCustomerRow, error) {
	rows, err := q.db.Query(ctx, getOrdersByCustomer, customerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetOrdersByCustomerRow{}
	for rows.Next() {
		var i GetOrdersByCustomerRow
		if err := rows.Scan(
			&i.OrderID,
			&i.OrderDate,
			&i.TotalAmount,
			&i.Status,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateOrderStatus = `-- name: UpdateOrderStatus :exec
UPDATE orders
SET status = 'Shipped'
WHERE order_id = $1::int
`

func (q *Queries) UpdateOrderStatus(ctx context.Context, orderID int32) error {
	_, err := q.db.Exec(ctx, updateOrderStatus, orderID)
	return err
}
