// Code generated by mockery v2.43.1. DO NOT EDIT.

package mocks

import (
	context "context"

	model "github.com/ciazhar/go-zhar/use-case/auth-service/internal/auth_service/model"
	mock "github.com/stretchr/testify/mock"
)

// AuthServiceInterface is an autogenerated mock type for the AuthServiceInterface type
type AuthServiceInterface struct {
	mock.Mock
}

// Login provides a mock function with given fields: ctx, body
func (_m *AuthServiceInterface) Login(ctx context.Context, body model.LoginRequest) (model.LoginResponse, error) {
	ret := _m.Called(ctx, body)

	if len(ret) == 0 {
		panic("no return value specified for Login")
	}

	var r0 model.LoginResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginRequest) (model.LoginResponse, error)); ok {
		return rf(ctx, body)
	}
	if rf, ok := ret.Get(0).(func(context.Context, model.LoginRequest) model.LoginResponse); ok {
		r0 = rf(ctx, body)
	} else {
		r0 = ret.Get(0).(model.LoginResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, model.LoginRequest) error); ok {
		r1 = rf(ctx, body)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Logout provides a mock function with given fields: ctx, accessToken
func (_m *AuthServiceInterface) Logout(ctx context.Context, accessToken string) error {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Logout")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, accessToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Protected provides a mock function with given fields: ctx, accessToken
func (_m *AuthServiceInterface) Protected(ctx context.Context, accessToken string) (string, error) {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Protected")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, accessToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, accessToken)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, accessToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RefreshToken provides a mock function with given fields: ctx, refreshToken
func (_m *AuthServiceInterface) RefreshToken(ctx context.Context, refreshToken string) (model.RefreshTokenResponse, error) {
	ret := _m.Called(ctx, refreshToken)

	if len(ret) == 0 {
		panic("no return value specified for RefreshToken")
	}

	var r0 model.RefreshTokenResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (model.RefreshTokenResponse, error)); ok {
		return rf(ctx, refreshToken)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) model.RefreshTokenResponse); ok {
		r0 = rf(ctx, refreshToken)
	} else {
		r0 = ret.Get(0).(model.RefreshTokenResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, refreshToken)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, user
func (_m *AuthServiceInterface) RegisterUser(ctx context.Context, user model.User) error {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, model.User) error); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Revoke provides a mock function with given fields: ctx, accessToken
func (_m *AuthServiceInterface) Revoke(ctx context.Context, accessToken string) error {
	ret := _m.Called(ctx, accessToken)

	if len(ret) == 0 {
		panic("no return value specified for Revoke")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, accessToken)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewAuthServiceInterface creates a new instance of AuthServiceInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewAuthServiceInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *AuthServiceInterface {
	mock := &AuthServiceInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
